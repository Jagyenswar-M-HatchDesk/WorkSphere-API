// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkSphere.Infrastructure;

#nullable disable

namespace WorkSphere.Infrastructure.Migrations
{
    [DbContext(typeof(WorkSphereDbContext))]
    [Migration("20250101082535_initials")]
    partial class initials
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole<int>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WorkSphere.Domain.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientID"));

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientID");

                    b.ToTable("tbl_Clients");

                    b.HasData(
                        new
                        {
                            ClientID = 1,
                            ClientName = "Hatchdesk",
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 980, DateTimeKind.Local).AddTicks(2565),
                            Email = "hatchdesk18@gmail.com",
                            IsActive = true,
                            IsDelete = false,
                            ModifiedOn = new DateTime(2025, 1, 1, 13, 55, 34, 980, DateTimeKind.Local).AddTicks(3072),
                            PhoneNumber = "7723099993"
                        },
                        new
                        {
                            ClientID = 2,
                            ClientName = "Congent",
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 980, DateTimeKind.Local).AddTicks(4356),
                            Email = "cogent@gmail.com",
                            IsActive = true,
                            IsDelete = false,
                            ModifiedOn = new DateTime(2025, 1, 1, 13, 55, 34, 980, DateTimeKind.Local).AddTicks(4358),
                            PhoneNumber = "374t4328234"
                        });
                });

            modelBuilder.Entity("WorkSphere.Domain.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeptId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("DeptId");

                    b.ToTable("mst_Departments");

                    b.HasData(
                        new
                        {
                            DeptId = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 678, DateTimeKind.Local).AddTicks(9403),
                            DeptName = "None",
                            IsActive = true,
                            IsDelete = false
                        },
                        new
                        {
                            DeptId = 2,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 678, DateTimeKind.Local).AddTicks(9795),
                            DeptName = "Desktop App Development",
                            IsActive = true,
                            IsDelete = false
                        },
                        new
                        {
                            DeptId = 3,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 678, DateTimeKind.Local).AddTicks(9822),
                            DeptName = "Mobile Development",
                            IsActive = true,
                            IsDelete = false
                        },
                        new
                        {
                            DeptId = 4,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 678, DateTimeKind.Local).AddTicks(9842),
                            DeptName = "UI/UX Design",
                            IsActive = true,
                            IsDelete = false
                        },
                        new
                        {
                            DeptId = 5,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 678, DateTimeKind.Local).AddTicks(9862),
                            DeptName = "API Development",
                            IsActive = true,
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("WorkSphere.Domain.Projects", b =>
                {
                    b.Property<int>("ProjID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjID"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjDescr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeverityLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TeamSize")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjID");

                    b.HasIndex("ClientId");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("ManagerID");

                    b.HasIndex("SeverityLevelId");

                    b.HasIndex("StatusId");

                    b.ToTable("tbl_Projects");

                    b.HasData(
                        new
                        {
                            ProjID = 1,
                            ClientId = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 980, DateTimeKind.Local).AddTicks(5487),
                            DepartmentID = 1,
                            ImagePath = "string.jpeg",
                            IsActive = true,
                            IsCompleted = false,
                            ManagerID = 2,
                            ModifiedOn = new DateTime(2025, 1, 1, 13, 55, 34, 980, DateTimeKind.Local).AddTicks(7041),
                            ProjDescr = "Project For test",
                            SeverityLevelId = 2,
                            StartDate = new DateTime(2025, 1, 1, 13, 55, 34, 980, DateTimeKind.Local).AddTicks(7384),
                            TeamSize = 3,
                            Title = "Test Project"
                        });
                });

            modelBuilder.Entity("WorkSphere.Domain.SeverityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createdon")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updatedon")
                        .HasColumnType("datetime2");

                    b.Property<string>("level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("mst_SeverityLevel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 1,
                            Createdon = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(2996),
                            IsActive = true,
                            IsDeleted = false,
                            Updatedon = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(3184),
                            level = "High"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 1,
                            Createdon = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(3495),
                            IsActive = true,
                            IsDeleted = false,
                            Updatedon = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(3497),
                            level = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 1,
                            Createdon = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(3524),
                            IsActive = true,
                            IsDeleted = false,
                            Updatedon = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(3525),
                            level = "Low"
                        });
                });

            modelBuilder.Entity("WorkSphere.Domain.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("mst_Status");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(1312),
                            IsActive = true,
                            IsDelete = false,
                            StatusName = "Accepted"
                        },
                        new
                        {
                            StatusId = 2,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(1656),
                            IsActive = true,
                            IsDelete = false,
                            StatusName = "In Progress"
                        },
                        new
                        {
                            StatusId = 3,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(1680),
                            IsActive = true,
                            IsDelete = false,
                            StatusName = "Pending"
                        },
                        new
                        {
                            StatusId = 4,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(1703),
                            IsActive = true,
                            IsDelete = false,
                            StatusName = "Delayed"
                        },
                        new
                        {
                            StatusId = 5,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(1724),
                            IsActive = true,
                            IsDelete = false,
                            StatusName = "At Risk"
                        },
                        new
                        {
                            StatusId = 6,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(1748),
                            IsActive = true,
                            IsDelete = false,
                            StatusName = "Completed"
                        },
                        new
                        {
                            StatusId = 7,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 679, DateTimeKind.Local).AddTicks(1769),
                            IsActive = true,
                            IsDelete = false,
                            StatusName = "Rejected"
                        });
                });

            modelBuilder.Entity("WorkSphere.Domain.Tasks", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskID"));

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Progress")
                        .HasColumnType("int");

                    b.Property<int>("ProjID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TaskDescr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskID");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("ProjID");

                    b.HasIndex("StatusId");

                    b.ToTable("tbl_Tasks");

                    b.HasData(
                        new
                        {
                            TaskID = 1,
                            AssignedTo = 3,
                            CreatedBy = 1,
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 980, DateTimeKind.Local).AddTicks(9241),
                            IsActive = true,
                            IsCompleted = false,
                            ModifiedOn = new DateTime(2025, 1, 1, 13, 55, 34, 981, DateTimeKind.Local).AddTicks(197),
                            Progress = 25,
                            ProjID = 1,
                            TaskDescr = "Task For test",
                            TaskTitle = "Test TAsk"
                        });
                });

            modelBuilder.Entity("WorkSphere.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Rollid")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DeptId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("Rollid");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d637e70-6d7d-4212-a0a8-2b87402eaa02",
                            CreatedBy = 1,
                            DateOfJoining = new DateTime(2025, 1, 1, 13, 55, 34, 682, DateTimeKind.Local).AddTicks(3276),
                            DeptId = 1,
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            ModifiedOn = new DateTime(2025, 1, 1, 13, 55, 34, 682, DateTimeKind.Local).AddTicks(3475),
                            PasswordHash = "AQAAAAIAAYagAAAAEPCj1tSrSEh2fov82waU05RqGPErlJiYoQb27V1JOP1J5Qy5XkzDiSccehp5t2kS2g==",
                            PhoneNumber = "7723099993",
                            PhoneNumberConfirmed = false,
                            Rollid = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c02d611-f649-413f-8fb0-654a438819ac",
                            CreatedBy = 1,
                            DateOfJoining = new DateTime(2025, 1, 1, 13, 55, 34, 792, DateTimeKind.Local).AddTicks(8741),
                            DeptId = 3,
                            Email = "tapanmeher@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Tapan",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Meher",
                            LockoutEnabled = false,
                            ModifiedOn = new DateTime(2025, 1, 1, 13, 55, 34, 792, DateTimeKind.Local).AddTicks(8767),
                            PasswordHash = "AQAAAAIAAYagAAAAENV6jI0ZFkJW4/wZpRJsk6oGr7JC/W7nS3ICt45zZdkRnPHh5Z0bCwbZj790MgE80Q==",
                            PhoneNumber = "7723099993",
                            PhoneNumberConfirmed = false,
                            Rollid = 2,
                            TwoFactorEnabled = false,
                            UserName = "tapanmeher@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b37cf34-91b4-48be-a80c-ca68c44e2dab",
                            CreatedBy = 1,
                            DateOfJoining = new DateTime(2025, 1, 1, 13, 55, 34, 885, DateTimeKind.Local).AddTicks(7615),
                            DeptId = 3,
                            Email = "sakshiyadav@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sakshi",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Yadav",
                            LockoutEnabled = false,
                            ModifiedOn = new DateTime(2025, 1, 1, 13, 55, 34, 885, DateTimeKind.Local).AddTicks(7641),
                            PasswordHash = "AQAAAAIAAYagAAAAEAWn704kMUR9T9TckGH2aR4GVtdesislTeNtJQ0OWMB206JEGrNo4HQWNbfG7lM3dQ==",
                            PhoneNumber = "2783682993",
                            PhoneNumberConfirmed = false,
                            Rollid = 3,
                            TwoFactorEnabled = false,
                            UserName = "sakshiyadav@gmail.com"
                        });
                });

            modelBuilder.Entity("WorkSphere.Domain.Roles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<int>");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 676, DateTimeKind.Local).AddTicks(2903),
                            IsActive = true,
                            IsDelete = false
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manager",
                            NormalizedName = "MANAGER",
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 678, DateTimeKind.Local).AddTicks(6977),
                            IsActive = true,
                            IsDelete = false
                        },
                        new
                        {
                            Id = 3,
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE",
                            CreatedOn = new DateTime(2025, 1, 1, 13, 55, 34, 678, DateTimeKind.Local).AddTicks(7165),
                            IsActive = true,
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("WorkSphere.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("WorkSphere.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkSphere.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("WorkSphere.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkSphere.Domain.Projects", b =>
                {
                    b.HasOne("WorkSphere.Domain.Client", "ClientNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkSphere.Domain.Department", "DepartmentNav")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkSphere.Domain.User", "ManagerNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkSphere.Domain.SeverityLevel", "SeverityLevelNav")
                        .WithMany("Projects")
                        .HasForeignKey("SeverityLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkSphere.Domain.Status", "StatusNav")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ClientNavigation");

                    b.Navigation("DepartmentNav");

                    b.Navigation("ManagerNavigation");

                    b.Navigation("SeverityLevelNav");

                    b.Navigation("StatusNav");
                });

            modelBuilder.Entity("WorkSphere.Domain.Tasks", b =>
                {
                    b.HasOne("WorkSphere.Domain.User", "AssignedEmployee")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkSphere.Domain.Projects", "ProjectNav")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkSphere.Domain.Status", "StatusNav")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedEmployee");

                    b.Navigation("ProjectNav");

                    b.Navigation("StatusNav");
                });

            modelBuilder.Entity("WorkSphere.Domain.User", b =>
                {
                    b.HasOne("WorkSphere.Domain.Department", "DepartmentNavigation")
                        .WithMany("Users")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkSphere.Domain.Roles", "RoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Rollid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DepartmentNavigation");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("WorkSphere.Domain.Client", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("WorkSphere.Domain.Department", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WorkSphere.Domain.Projects", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("WorkSphere.Domain.SeverityLevel", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("WorkSphere.Domain.Status", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("WorkSphere.Domain.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("WorkSphere.Domain.Roles", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
